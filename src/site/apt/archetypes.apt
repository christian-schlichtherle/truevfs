    -----------------------
    Maven Archetypes
    -----------------------
    Christian Schlichtherle
    -----------------------

Maven Archetypes

    In order to help you setup your project environment and get going quickly,
    TrueZIP provides archetypes for {{{http://maven.apache.org}Apache Maven}}.

    At current, only an application archetype is provided.
    Future releases should contain a Maven archetype for file system drivers
    too, see {{{http://java.net/jira/browse/TRUEZIP-69}issue #69}}.

* Application Archetype

    Since TrueZIP 7 consists of a modular architecture, a frequent issue for
    TrueZIP beginners is understanding TrueZIP's run time dependencies.
    Configuring TrueZIP's run time dependencies is important because by
    default, the {{{./truezip-file/index.html}File* API}} uses a service locator
    which scans the class path for file system driver service providers
    (contained in the {{{./truezip-driver/index.html}file system driver modules}}).

    Although it's straightforward, setting up the class path can be a daunting
    task for a TrueZIP beginner, so a Maven archetype for applications is
    provided by TrueZIP.
    This archetype shows how to setup the run time dependencies and, as an
    alternative, how to avoid using the service locator by using dependency
    injection instead.

    To use the application archetype, type the following command in a shell
    while substituting the <<<groupId>>>, <<<artifactId>>> and <<<package>>>
    parameters with the appropriate values for your project:

+--+
$ mvn archetype:generate -B \
    -DarchetypeGroupId=de.schlichtherle.truezip \
    -DarchetypeArtifactId=truezip-archetype-file \
    -DarchetypeVersion=RELEASE \
    -DgroupId=com.company \
    -DartifactId=project \
    -Dversion=1.0-SNAPSHOT \
    -Dpackage=com.company.project
+--+

    Upon successful execution, a new directory with the name of the
    <<<artifactId>>> parameter will have been created in the current directory.
    If you copy/paste the above command literally to a shell this would result
    in the following directory structure:

+--+
project
|-- pom.xml
`-- src
    `-- main
        `-- java
            `-- com
                `-- company
                    `-- project
                        |-- Application.java
                        |-- Copy.java
                        `-- Tree.java
+--+

    The project directory contains the following files:

    [<<<pom.xml>>>]
    This is the Maven Project Object Model file which defines the Maven
    dependencies in order to setup the class path.
    It's annotated with lots of comments in order to help you updating it for
    your specific project requirements.

    [<<<src/main/java/com/company/project/Application.java>>>]
    An abstract base class which runs the setup-work-sync lifecycle for a
    typical TrueZIP application.
    Subclass or edit this template class to meet your requirements.

    [<<<src/main/java/com/company/project/Copy.java>>>]
    Command line utility to recursively copy the first file or directory
    argument to the second file or directory argument.
    Instead of a directory, you can name any configured archive file type in
    the path names, too.
    If you name any archive files in the destination path name, they get
    automatically created.

    [<<<src/main/java/com/company/project/Tree.java>>>]
    Command line utility to print the tree graph of the directory structure of
    its file or directory arguments to the standard output.
    Instead of a directory, you can name any configured archive file type as an
    argument, too.

    []

    To install the generated project, type:

+--+
$ cd project
$ mvn clean install
+--+

    This will install the application to your local Maven repository.
    Now that you've done this, you can test drive the <<<Tree>>> class by
    entering:

+--+
$ mvn exec:java -Dexec.mainClass=com.company.project.Tree
+--+

    This should produce the following output at the end:

+--+
.
|-- pom.xml
|-- src
|   `-- main
|       `-- java
|           `-- com
|               `-- company
|                   `-- project
|                       |-- Application.java
|                       |-- Copy.java
|                       `-- Tree.java
`-- target
    |-- classes
    |   `-- com
    |       `-- company
    |           `-- project
    |               |-- Application.class
    |               |-- Copy.class
    |               `-- Tree.class
    |-- generated-sources
    |   `-- annotations
    |-- maven-archiver
    |   `-- pom.properties
    |-- project-1.0-SNAPSHOT.jar
    |   |-- META-INF
    |   |   |-- MANIFEST.MF
    |   |   `-- maven
    |   |       `-- com.company
    |   |           `-- project
    |   |               |-- pom.xml
    |   |               `-- pom.properties
    |   `-- com
    |       `-- company
    |           `-- project
    |               |-- Application.class
    |               |-- Copy.class
    |               `-- Tree.class
    `-- surefire
+--+

    Note that the contents of the JAR file
    <<<target/project-1.0-SNAPSHOT.jar>>> get listed, too!
    This is because the configuration file <<<pom.xml>>> is set up to recognize
    JAR files as virtual directories by adding the module TrueZIP Driver ZIP
    with the artifactId <<<truezip-driver-zip>>> to the run time class path.
    You can change this by editing the configuration file <<<pom.xml>>> or the
    method <<<setup()>>> of the class <<<Application>>>.

    Now that everything is set up, go editing the source files.

    That's it - enjoy TrueZIP!
