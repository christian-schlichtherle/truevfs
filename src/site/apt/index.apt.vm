    -----------------------
    Home Page
    -----------------------
    Christian Schlichtherle
    -----------------------

About

    TrueVFS is a virtual file system (VFS) for Java&#160;7 which enables client
    applications to perform CRUD (Create, Read, Update, Delete) operations on
    archive files as if they were virtual directories, even with nested archive
    files in multithreaded environments - see {{{./features.html}Key Features}}.
    With TrueVFS, creating a TAR.GZ file from a ZIP file is as easy as calling:

+--+
new TFile("archive.zip").cp_rp(new TFile("archive.tar.gz"));
+--+

    TrueVFS is Open Source Software and is covered by the
    {{{./license.html}Eclipse Public License, Version 1.0}}.
    The most recent version is TrueVFS&#160;${project.version} - see
    {{{http://java.net/jira/browse/TRUEVFS#selectedTab=com.atlassian.jira.plugin.system.project:changelog-panel}Change Log}}.

* State Of Affairs

    TrueVFS&#160;1 is the successor to
    {{{http://truezip.java.net}TrueZIP&#160;7}}.
    TrueVFS&#160;1.0&#160;Beta&#160;1 has been developed from the TrueZIP code
    base by a long chain of refactorings and reflects the latest changes up to
    TrueZIP&#160;7.6.1.
    While refactoring, the original suite of unit and integration tests has
    been maintained and extended so that you can easily put the same faith into
    this beta version than you could put into TrueZIP&#160;7.6.1.
    Yet this is a beta version because chances are that there will be backwards
    incompatible changes to the API before the final release of
    TrueVFS&#160;1.0.
    This is unlikely to happen in the client API, however.

    If you are interested in the plans for this project, please have a look
    at its
    {{{http://java.net/jira/browse/TRUEVFS#selectedTab=com.atlassian.jira.plugin.system.project%3Aroadmap-panel}road map on JIRA}}
    or subscribe to the {{{./mail-list.html}users mailing list}} for discussion.

    Developing TrueVFS is a serious effort which requires a lot of time.
    So any sponsors or donations are most welcome.
    Just click the <Donate> button in the navigation bar on the left
    or {{{./team-list.html}contact me}} personally.
    <<Any donation will help to speed up the development process and ensure the
    future of this project!>>

* Supported File System Types

    TrueVFS ships with the following pluggable file system driver modules:

*--*--*
|| Module || Description
*--+--+
| {{{./truevfs-driver/truevfs-driver-file/index.html}TrueVFS Driver FILE}} | Provides read/write access to the platform file system.
*--+--+
| {{{./truevfs-driver/truevfs-driver-http/index.html}TrueVFS Driver HTTP(S)}} | Provides read-only access to HTTP(S) URLs.
*--+--+
| {{{./truevfs-driver/truevfs-driver-tar/index.html}TrueVFS Driver TAR}} | Provides read/write access to TAR, TAR.BZ2, TAR.GZ and TAR.XZ files.
*--+--+
| {{{./truevfs-driver/truevfs-driver-zip/index.html}TrueVFS Driver ZIP}} | Provides read/write access to ZIP, JAR, EAR, WAR etc. Supports appending to existing ZIP files, recovery of lost ZIP entries, WinZip AES encryption, BZIP2 compression, selectable character sets, external file attributes and ZIP64 extensions.
*--+--+
| {{{./truevfs-driver/truevfs-driver-tzp/index.html}TrueVFS Driver ZIP.RAES (TZP)}} | Provides read/write access to JAR files which are entirely wrapped in an envelope with AES-256/CTR encryption, SHA-256 authentication and PKCS #12 V1 PBKDF.
*--+--+

    Add the JAR artifact of these modules to the run time class path to
    make their file system drivers available for service location in the client
    API modules - see below.

* Using TrueVFS

    As a library, TrueVFS provides simple, uniform, transparent,
    thread-safe, read/write access to archive files as if they were
    virtual directories in a file system path.
    TrueVFS provides the module
    {{{./truevfs-access/index.html}TrueVFS&#160;Access}}
    with the client facade API for convenient access to its (federated virtual)
    file system space.

    Writing an application for this API is really easy:
    Please have a look at the page {{{./kick-start/index.html}Getting Started}}
    to learn how to generate a TrueVFS client application from a Maven
    archetype in about ten minutes.

* Extending TrueVFS

    As a framework, TrueVFS provides the interfaces and classes to
    write file system drivers which plug-in to its federated file
    system space.
    The module TrueVFS&#160;Kernel modules provide federating, multithreading,
    multiplexing, caching and accounting so that archive file system drivers do
    not need to take care of these aspects of a virtual file system.

    Unfortunately, there is no tutorial for how to write a file system driver,
    but there's comprehensive Javadoc and sample code:

    * If you are going to write a federated file system driver
      (i.e. archive driver), please consult the Javadoc for
      {{{./apidocs/net/java/truevfs/kernel/spec/FsArchiveDriver.html}<<<net.java.truevfs.kernel.spec.FsArchiveDriver>>>}}.

    * If you are going to write a non-federated file system driver,
      please consult the Javadoc for
      {{{./apidocs/net/java/truevfs/kernel/spec/FsDriver.html}<<<net.java.truevfs.kernel.spec.FsDriver>>>}}.

    []
