    -----------------------
    About
    -----------------------
    Christian Schlichtherle
    -----------------------

About

* Welcome to the TrueZIP User Website!

    TrueZIP is a plug-in framework for virtual file systems (VFS) which
    provides transparent access to archive files as if they were just
    plain directories.
    
    Key Claims:

    [[1]] <<{Archive files are virtual directories}!>>

    [[1]] <<{Reliability is a key value proposition}!>>

    [[1]] <<{Make simple things easy and complex things possible}!>>

    []

** Using TrueZIP

    As an API, TrueZIP provides uniform, transparent, thread-safe,
    read/write access to archive files as if they were just plain
    directories in a file system path.

    Starting with TrueZIP 7.2, there are two client APIs available which can
    get used to access the same file systems concurrently:

    * The {{{./truezip-file/index.html}TrueZIP File*}} module provides the
      package
      {{{./apidocs/de/schlichtherle/truezip/file/package-summary.html}<<<de.schlichtherle.truezip.file>>>}}.
      The classes in this package can get used in exactly the same way as the
      <<<java.io.File*>>> classes, so it's really easy to learn or migrate
      an existing application.
      In addition, they provide easy to use, yet powerful methods for
      standard tasks like file or directory tree copying, moving, deleting,
      traversing etc.
      This API requires a JSE 6 compliant JVM.

    * The {{{./truezip-path/index.html}TrueZIP Path}} module provides the
      package
      {{{./apidocs/de/schlichtherle/truezip/nio/file/package-summary.html}<<<de.schlichtherle.truezip.nio.file>>>}}.
      The classes in this package implement a
      <<<java.nio.file.spi.FileSystemProvider>>> for the NIO.2 API to enable an
      application to access archive files within any (virtual) file system,
      e.g. via HTTP(S).
      Applications can even read or write archive entries in random order using
      a <<<SeekableByteChannel>>>.
      This API requires a JSE 7 compliant JVM.

    []

    Writing an application for either API is really easy:
    Have a look at the {{{./usecases/index.html}Use Cases}} for some samples
    using the TrueZIP File* API.

** Extending TrueZIP

    As a framework, TrueZIP provides the interfaces and classes to
    write file system drivers which plug-in to its federated file
    system space.
    The TrueZIP Kernel module provides multithreading, multiplexing,
    caching and buffering so that the file system drivers do not need to
    take care of this.

    There is no tutorial for how to write a file system driver yet,
    but there's comprehensive Javadoc:

    * If you are going to write a federated file system driver
      (i.e. archive driver), please consult the Javadoc for
      {{{./apidocs/de/schlichtherle/truezip/fs/archive/FsArchiveDriver.html}<<<de.schlichtherle.truezip.fs.archive.FsArchiveDriver>>>}}.

    * If you are going to write a non-federated file system driver,
      please consult the Javadoc for
      {{{./apidocs/de/schlichtherle/truezip/fs/FsDriver.html}<<<de.schlichtherle.truezip.fs.FsDriver>>>}}.

    []

    For examples, please {{{./source-repository.html}check out}} the source
    code of this project and consult the file system driver implementations
    which ship with TrueZIP.

* Getting Started

    [[1]] Read the
          {{{./kick-start/index.html}Kick-Start}} section in order to generate,
          build and run a TrueZIP File* or TrueZIP Path application in about
          ten minutes!

    [[1]] If you are looking for more sample code and applications,
          please
          {{{http://repo1.maven.org/maven2/de/schlichtherle/truezip/truezip-samples/${project.version}/truezip-samples-${project.version}-sources.jar}download}}
          the source code of the
          {{{./truezip-samples/index.html}TrueZIP Samples}} module.

    [[1]] If you encounter issues, please read the {{{./faq.html}FAQ}}
          before subscribing and posting to the
          {{{./mail-lists.html}User Mailing List}}.

    [[1]] Last, but not least, please read the
          {{{./apidocs/index.html}Javadoc}}.

    []

    If you're still not fed up, you might also want to check out
    {{{http://truezip.schlichtherle.de}The TrueZIP Blog}}
    or the
    {{{http://java.net/projects/truezip}TrueZIP Developer Website}}.

    Note that the documentation on this site is generally split across modules,
    so please check the section <Project Modules> in the navigation bar on
    this page, too.

* Migration from TrueZIP 6

    There's an {{{./migration.html}article}} for this here, too!
