    -----------------------
    Home Page
    -----------------------
    Christian Schlichtherle
    -----------------------

About

    TrueVFS is a virtual file system (VFS) for Java&#160;7 which enables client
    applications to perform CRUD (Create, Read, Update, Delete) operations on
    archive files as if they were virtual directories, even with nested archive
    files in multithreaded environments - see {{{./features.html}Key Features}}.
    With TrueVFS, creating a TAR.GZ file from a ZIP file is as easy as calling:

+--+
new TFile("archive.zip").cp_rp(new TFile("archive.tar.gz"));
+--+

    TrueVFS is Open Source Software and is covered by the
    {{{./license.html}Eclipse Public License, Version 1.0}}.
    The most recent version is TrueVFS&#160;${project.version} - see
    {{{http://java.net/jira/browse/TRUEVFS#selectedTab=com.atlassian.jira.plugin.system.project:changelog-panel}Change Log}}.

* State Of Affairs

    TrueVFS&#160;1 is the successor to
    {{{http://truezip.java.net}TrueZIP&#160;7}}.
    TrueVFS&#160;1.0&#160;Beta&#160;1 has been developed by refactoring the
    TrueZIP code and reflects the latest changes up to TrueZIP&#160;7.6.2.
    While refactoring, the original suite of unit and integration tests has
    been maintained and extended so that you can easily put the same faith into
    this beta version than you could put into TrueZIP&#160;7.6.2.
    Yet this is a beta version because chances are that there will be backwards
    incompatible changes to the API before the final release of
    TrueVFS&#160;1.0.
    This is unlikely to happen in the client API, however.

    If you are interested in the plans for this project, please have a look
    at its
    {{{http://java.net/jira/browse/TRUEVFS#selectedTab=com.atlassian.jira.plugin.system.project%3Aroadmap-panel}Road Map}}
    on JIRA or subscribe to its {{{./mail-lists.html}Users Mailing List}} for discussion.

    Developing TrueVFS is a serious effort which requires a lot of time.
    So any sponsors or donations are most welcome.
    Just click the <Donate> button in the navigation bar on the left side or
    {{{./team-list.html}contact me}} personally.
    <<Any donation will help to speed up the development process and ensure the
    future of this project!>>

* Supported File System Types

    TrueVFS&#160;${project.version} ships with pluggable driver modules for
    {{{./truevfs-driver/truevfs-driver-file/index.html}FILE}},
    {{{./truevfs-driver/truevfs-driver-http/index.html}HTTP(S)}},
    {{{./truevfs-driver/truevfs-driver-jar/index.html}JAR}},
    {{{./truevfs-driver/truevfs-driver-odf/index.html}ODF}},
    {{{./truevfs-driver/truevfs-driver-sfx/index.html}SFX}},
    {{{./truevfs-driver/truevfs-driver-tar/index.html}TAR}},
    {{{./truevfs-driver/truevfs-driver-tar-bzip2/index.html}TAR.BZIP2}},
    {{{./truevfs-driver/truevfs-driver-tar-gzip/index.html}TAR.GZIP}},
    {{{./truevfs-driver/truevfs-driver-tar-xz/index.html}TAR.XZ}},
    {{{./truevfs-driver/truevfs-driver-zip/index.html}ZIP}}
    and
    {{{./truevfs-driver/truevfs-driver-tzp/index.html}ZIP.RAES (TZP)}}
    file system schemes. For the final release, there will be more.

    Simply add the JAR artifact of these driver modules to the run time class
    path to make their file system drivers available for service location in
    the client API module - see below.

* Using TrueVFS

    As a library, TrueVFS provides simple, uniform, transparent,
    thread-safe, read/write access to archive files as if they were
    virtual directories in a file system path.
    TrueVFS provides the module
    {{{./truevfs-access/index.html}TrueVFS&#160;Access}}
    with the client facade API for convenient access to its (federated virtual)
    file system space.

    Writing an application for this API is really simple:
    Please have a look at the page {{{./kick-start/index.html}Getting Started}}
    to learn how to generate a TrueVFS client application from a Maven
    archetype in about ten minutes or have a look at the
    {{{./kick-start/tutorial.html}tutorial}}.

* Extending TrueVFS

    As a framework, TrueVFS provides the API to write file system drivers which
    plug-in to its federated file system space.
    The module TrueVFS&#160;Kernel modules features federating, multithreading,
    multiplexing, caching and accounting so that (archive) file system drivers
    do not need to take care of these aspects of a (virtual) file system.

    While there is no tutorial for how to write a file system driver, there's
    comprehensive Javadoc and sample code:

    * If you are going to write an archive file system driver,
      please consult the Javadoc for
      {{{./apidocs/net/java/truevfs/kernel/spec/FsArchiveDriver.html}<<<net.java.truevfs.kernel.spec.FsArchiveDriver>>>}}.

    * If you are going to write a plain file system driver,
      please consult the Javadoc for
      {{{./apidocs/net/java/truevfs/kernel/spec/FsDriver.html}<<<net.java.truevfs.kernel.spec.FsDriver>>>}}.

    []
