    -----------------------
    Home Page
    -----------------------
    Christian Schlichtherle
    -----------------------

About

    TrueVFS is a Java based virtual file system (VFS) which enables client
    applications to perform CRUD (Create, Read, Update, Delete) operations on
    archive files as if they were virtual directories, even with nested archive
    files in multithreaded environments - see {{{./features.html}Key Features}}.
    With TrueVFS, creating a TAR.GZ file from a ZIP file is as easy as calling:

+--+
new TFile("archive.zip").cp_rp(new TFile("archive.tar.gz"));
+--+

    TrueVFS is Open Source Software and is covered by the
    {{{./license.html}Eclipse Public License, Version 1.0}}.
    The most recent version is TrueVFS&#160;${project.version} - see
    {{{http://java.net/jira/browse/TRUEZIP#selectedTab=com.atlassian.jira.plugin.system.project:changelog-panel}Change Log}}.

* Supported File System Types

    TrueVFS ships with the following pluggable file system driver modules:

*--*--*
|| Module || Description
*--+--+
| {{{./truevfs-driver/truevfs-driver-file/index.html}TrueVFS Driver FILE}} | Provides read/write access to the platform file system.
*--+--+
| {{{./truevfs-driver/truevfs-driver-http/index.html}TrueVFS Driver HTTP(S)}} | Provides read-only access to HTTP(S) URLs.
*--+--+
| {{{./truevfs-driver/truevfs-driver-tar/index.html}TrueVFS Driver TAR}} | Provides read/write access to TAR, TAR.GZ and TAR.BZ2 files.
*--+--+
| {{{./truevfs-driver/truevfs-driver-zip/index.html}TrueVFS Driver ZIP}} | Provides read/write access to ZIP, JAR, EAR, WAR etc. Supports appending to existing ZIP files, recovery of lost ZIP entries, WinZip AES encryption, BZIP2 compression, selectable character sets, external file attributes and ZIP64 extensions.
*--+--+
| {{{./truevfs-driver/truevfs-driver-tzp/index.html}TrueVFS Driver ZIP.RAES (TZP)}} | Provides read/write access to JAR files which are entirely wrapped in an envelope with AES-256/CTR encryption, SHA-256 authentication and PKCS #12 V1 PBKDF.
*--+--+

    Add the JAR artifact of these modules to the run time class path to
    make their file system drivers available for service location in the client
    API modules - see below.

* Using TrueVFS

    As a library, TrueVFS provides simple, uniform, transparent,
    thread-safe, read/write access to archive files as if they were
    virtual directories in a file system path.
    TrueVFS provides two client API modules to access its (federated virtual)
    file system space.
    Both can be used simultaneously to access the same file systems:

*--*--*
|| Module || Description
*--+--+
| {{{./truevfs-access/truevfs-access-file/index.html}TrueVFS Access File*}}| Provides classes which can get used in exactly the same way as the <<<java.io.File*>>> classes, so it's easy to learn or migrate an existing application. In addition, easy to use, yet powerful methods for standard tasks like file or directory tree copying, moving, deleting, traversing etc are provided, too.
*--+--+
| {{{./truevfs-access/truevfs-access-path/index.html}TrueVFS Access Path}} | Provides classes which implement a <<<java.nio.file.spi.FileSystemProvider>>> for the NIO.2 API (JSR&#160;203) to enable an application to access archive files within any (virtual) file system, e.g. via HTTP(S). Applications can even read or write archive entries in random order using a <<<SeekableByteChannel>>>.
*--+--+

    Writing an application for either API is really easy:
    Please have a look at the page {{{./kick-start/index.html}Getting Started}}
    to learn how to generate a TrueVFS client application from a Maven
    archetype in about ten minutes.

* Extending TrueVFS

    As a framework, TrueVFS provides the interfaces and classes to
    write file system drivers which plug-in to its federated file
    system space.
    The module TrueVFS&#160;Kernel provides federating, multithreading,
    multiplexing, caching and accounting so that archive file system drivers
    do not need to take care of these aspects of a virtual file system.

    Unfortunately, there is no tutorial for how to write a file system driver,
    but there's comprehensive Javadoc and sample code:

    * If you are going to write a federated file system driver
      (i.e. archive driver), please consult the Javadoc for
      {{{./apidocs/net/truevfs/kernel/FsArchiveDriver.html}<<<net.truevfs.kernel.FsArchiveDriver>>>}}.

    * If you are going to write a non-federated file system driver,
      please consult the Javadoc for
      {{{./apidocs/net/truevfs/kernel/FsDriver.html}<<<net.truevfs.kernel.FsDriver>>>}}.

    []
