    -----------------------
    Kick-Starting TrueZIP File* Applications From a Maven Archetype In Eclipse
    -----------------------
    Christian Schlichtherle
    -----------------------

Kick-Starting TrueZIP File* Applications From a Maven Archetype In Eclipse

    This guide shows how to kick-start a TrueZIP File* application in
    Eclipse
    with the help of the TrueZIP File* Application Archetype.
    If you are using NetBeans, then please read the guide for
    {{{./netbeans.html}NetBeans}}
    instead.
    If you are using none of these, then please read the guide for the
    {{{./shell.html}Command Line Shell}}
    instead.

* Motivation

    A typical issue for beginners is understanding the dependency of TrueZIP 7
    on
    {{{../../truezip-driver/index.html}file system driver modules}}
    at run time:
    The module {{{../../truezip-file/index.html}TrueZIP File*}} uses a
    {{{../../apidocs/de/schlichtherle/truezip/fs/sl/FsDriverLocator.html#SINGLETON}file system driver service locator singleton}}
    which scans the class path for
    {{{../../apidocs/de/schlichtherle/truezip/fs/spi/FsDriverService.html}file system driver services}}
    .
    These file system driver services are contained in
    {{{../../truezip-driver/index.html}file system driver modules}}.
    By adding a file system driver module to the run time dependencies of your
    application, you enable the TrueZIP File* module to add its file system
    drivers to the
    {{{../../apidocs/de/schlichtherle/truezip/file/TFile.html#getDefaultArchiveDetector()}initial set up}}
    of its
    {{{../../apidocs/de/schlichtherle/truezip/file/TArchiveDetector.html#ALL}archive detection}}
    .

    Although it's straightforward, setting up the class path can be a daunting
    task for TrueZIP beginners, so a Maven archetype is provided as a template
    for TrueZIP File* applications.
    This archetype shows how to setup the run time dependencies and, as an
    alternative, how to avoid using the service locator by using dependency
    injection instead.

* Prerequisites

    You need to have the following software installed:

    * {{{http://www.eclipse.org/downloads/}Eclipse Helios}}

    []

* Set Up Eclipse

    Unless already done, you need to install the feature
    {{{http://m2eclipse.sonatype.org/}M2Eclipse}} alias Maven Integration for
    Eclipse.
    You can easily install the feature by selecting the menu item <Help> ->
    <Eclipse Marketplace...>.

    You can verify the installation by selecting <Help> -> <About Eclipse>.
    The dialog should show a button with the red label <m2>:

[eclipse/01_About_Eclipse.png] About Eclipse

    If you click on this button, a property dialog is opened which should look
    like this:

[eclipse/02_About_Eclipse_Features.png] About Eclipse Features

    Once installed, it's a very good idea to configure the feature preferences
    in your current Workspace now or in your projects later.
    Sonatype Inc. provides online documentation for this task at
    {{http://www.sonatype.com/books/m2eclipse-book/reference/preferences.html}}.

* Generate Maven Archetype

    To generate the application archetype, select <File> -> <New> -> <Other...>
    or type <Ctrl+N> to open the following dialog:

[eclipse/03_New.png] New

    Select <Maven> -> <Maven Project> and click <Next> to open the following
    dialog:

[eclipse/04_New_Maven_Project.png] New Maven Project

    Click <Next> to open the following dialog:

[eclipse/05_New_Maven_Project.png] New Maven Project

    Make sure to have <All Catalogs> or <Nexus Indexer> selected in the
    <Catalog> drop down combo box, enter <truezip> into the <Filter> field,
    select the latest entry with the Artifact Id <truezip-archetype-file> and
    click <Next> to open the following dialog:

[eclipse/06_New_Maven_Project.png] New Maven Project

    Enter the appropriate values for your project's <Group Id>, <Artifact Id>,
    <Version> and <Package> and then click <Finish> to see the magical
    population of the Package Explorer with your shiny new TrueZIP File*
    application happen:

[eclipse/07_Package_Explorer.png] Package Explorer

* Explore Your Application

    The project directory contains the following files:

    [<<<pom.xml>>>]
    This is the Maven Project Object Model (POM).
    The POM declares the properties of your project to Maven so that it can
    build, install and run it.
    Within the \<project\>/\<dependencies\> element is the declaration of the
    dependencies of your application, i.e. the libraries required to compile
    and run it.
    Each driver module on the run time class path adds to the initial set up
    of detected archive types by the TrueZIP File* API as explained above,
    so please edit it
    {{{Edit_Your_Application}later}} to meet your application requirements.
    For now, please leave this file alnonw.

    [<<<src/main/java/com/company/project/Application.java>>>]
    This is an abstract base class which runs the setup-work-sync life cycle
    of a typical TrueZIP File* application.
    Subclass or edit this template class to meet your requirements.

    [<<<src/main/java/com/company/project/Copy.java>>>]
    This is a command line utility to recursively copy the first file or
    directory argument to the second file or directory argument.
    Instead of a directory, you can name any configured archive file type in
    the path names, too.
    If you name any archive files in the destination path name, they get
    automatically created.

    [<<<src/main/java/com/company/project/Tree.java>>>]
    This is a command line utility to print an ASCII graph of the directory
    tree for its file or directory arguments to the standard output.
    Instead of a directory, you can name any configured archive file type as an
    argument, too.

    []

* Build And Run Your Application

    To build and install your application in your local Maven repository,
    select your project in the Package Explorer view and select <Run> ->
    <Run As> -> <Maven install>.
    This should open a Console view with the output of the Maven command.
    Close to its end, it should read <<<[INFO] BUILD SUCCESS>>>:

[eclipse/08_Console.png] Console

    To run the main class <<<Tree>>>, select it in the Package Explorer view
    and select <Run> -> <Run As> -> <Java Application>.
    This should produce a similar output to the following in the Console view:

[eclipse/09_Console.png] Console

    Note that the contents of the JAR file
    <<<target/project-0.1-SNAPSHOT.jar>>> get listed, too!
    This is because the configuration file <<<pom.xml>>> is set up to recognize
    JAR files as virtual directories by adding the module TrueZIP Driver ZIP
    with the artifactId <<<truezip-driver-zip>>> to the run time class path.
    You can change this by editing the configuration file <<<pom.xml>>> or the
    method <<<setup()>>> of the class <<<Application>>>.

* Edit Your Application

    Now you're ready and set to edit your application to meet your requirements.

    Mind that the class <<<Application>>> is just a template to show the
    general setup-work-sync life cycle:
    You don't need to use this class at all as long as your application
    implements this life cycle somehow.

    Finally, don't forget to configure the run time dependencies in the
    <<<pom.xml>>> unless your application explicitly configures the archive
    detection in its setup phase.
