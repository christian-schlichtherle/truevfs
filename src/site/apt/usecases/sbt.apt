    -----------------------
    Software Build Tool (SBT)
    -----------------------
    Christian Schlichtherle
    -----------------------

Software Build Tool (SBT)

    Suppose you're writing a plug-in for the next generation SBT
    which shall create assemblies of all project artifacts.
    Then you may need to support at least the following archive types:

    * TAR.GZ

    * TAR.BZ2

    * ZIP

    * JAR

    * WAR

    * EAR

    * ...

    []

    You can easily figure that writing the code to create archive
    files of all these types will be a cumbersome and tedious task because
    each archive type comes with its own classes to write them.

    Thanks to the
    {{{./truezip-file/index.html}TrueZIP File*}}
    module, here's your relief:
    Its
    {{{./apidocs/de/schlichtherle/truezip/file/TFile.html}<<<TFile>>>}}
    class extends the <<<java.io.File>>> class in order to add the
    required functionality.
    See how easy "tarring" a directory can be:

+--+
TFile.cp_rp(new TFile("directory"), new TFile("archive.tar.gz"));
+--+

    The name of the method <<<TFile.cp_rp(*)>>> is modeled after the Unix
    command line <<<cp -rp>>> which copies its arguments recursively and
    preserves all file attributes.

    However, in order to prevent ambiguities, unlike the <<<cp>>> command line
    utility, TrueZIP does not support auto-completion of path names or mixing
    file and directory parameters.
    So you must provide <complete path names> for both the source and the
    destination.
    E.g. in order to copy a single file to an archive file, you would have to
    call something like this:

+--+
TFile.cp_rp(new TFile("file"), new TFile("archive.tar.gz/file"));
+--+

    The <<<TFile>>> class provides many alternative constructors and methods to
    ease the tasks of constructing complete path names and copy files or
    directories - please consult the
    {{{./apidocs/de/schlichtherle/truezip/file/TFile.html}Javadoc}}
    for more information.
    
    The type of the prospective archive file is detected by its
    suffix in a path name.
    In this case <<<.tar.gz>>> was used, but you could use any other
    configured archive file suffix, too.

    Configuration is easy - just add the JAR of the file system driver module
    for the desired archive type to the application's run time class path.
    This will configure the TrueZIP File* module to detect the canonical file
    suffixes of the archive types implemented by the file system driver module.
    For example, adding the Maven artifactId <<<truezip-driver-tar>>> as a
    dependency to the POM of your Maven build would configure the file suffixes
    <<<.tar>>>, <<<.tar.gz>>>, <<<.tgz>>>, <<<.tar.bz2>>> and <<<.tbz2>>> to
    be recognized for TAR files.

    In case you want a <<<TFile>>> object to recognize a different set of
    archive file suffixes than the ones enumerated on the run time class
    path, you could directly inject a
    {{{./apidocs/de/schlichtherle/truezip/file/TArchiveDetector.html}<<<TArchiveDetector>>>}}
    instance to the constructor of the <<<TFile>>> object like this:

+--+
TFile file = new TFile("archive.zip", TDefaultArchiveDetector.NULL);
+--+

    In this example,
    {{{./apidocs/de/schlichtherle/truezip/file/TDefaultArchiveDetector.html#NULL}<<<TDefaultArchiveDetector.NULL>>>}}
    has been used to suppress the detection of any archive file suffixes.
    In case you need the opposite, you could inject
    {{{./apidocs/de/schlichtherle/truezip/file/TDefaultArchiveDetector.html#ALL}<<<TDefaultArchiveDetector.ALL>>>}}
    instead.

    Enjoy TrueZIP!
