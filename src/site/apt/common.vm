## This file contains macros for common use within this directory.
#macro(configuring $suffix $file $modules_need $artifactId)
* Configuring Archive Detection

    You may wonder how TrueZIP gets configured to treat a file name with a
    $suffix suffix as a $file file instead of a plain old file.
    For now, let it suffice to say that TrueZIP follows the
    convention-over-configuration principle as much as possible,
    so there are reasonable defaults for everything in order to relieve you
    from typical configuration tasks.

    For the previous examples to work, the JARs of the driver $modules_need
    to be present on the run time class path.
    You can achieve this by adding the Maven artifactId $artifactId as a
    dependency to the POM of your Maven build.

    For more information about configuring the client APIs, please refer to the
    article
    {{{../truezip-file/configuration.html}Configuring TrueZIP File*}}.

#end ## configuring
#macro(cleaningUp)
* Cleaning Up

    If your application has created or changed one or more archive files,
    then these changes need to get committed sometime.
    Even if your application has done read-only acess to the virtual file
    system, some temporary files may have been created to speed up subsequent
    access (this is driver dependent).

    If your application is only short-running, then there is actually nothing
    to do about this because the TrueZIP Kernel initially registers a JVM
    shutdown hook which will automatically commit all changes - even if the
    application terminates due to a <<<Throwable>>>.
    However, if your application is long running or needs more control over
    this operation, then it should manually commit all changes to archive
    files whenever this task has been completed.
    Here's how to do this: 

+--+
TVFS.umount();
+--+

    Note that once your application calls this method, the TrueZIP Kernel
    deregisters the JVM shutdown hook in order to prevent a potential memory
    leak if it's used in multi-classloader-environments, e.g. OSGI or JEE.
    Once called, the TrueZIP Kernel may fail to register the JVM shutdown hook
    again, so your application must repeat this call whenever it has finished
    accessing the virtual file system!

** Performance Considerations

    Take care not to call <<<TVFS.umount()>>> in a loop which updates the same
    set of archive files because this would result in poor performance in the
    order of <<<O(n*n)>>> instead of just <<<O(n)>>>, where <<<n>>> is the
    total number of archive entries.

    For more information, please refer to the Javadoc for
    {{{../apidocs/de/truezip/file/TVFS.html#umount()}<<<TVFS.umount()>>>}}.

#end ## cleaningUp
