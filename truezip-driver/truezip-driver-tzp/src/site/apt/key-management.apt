    ---
    TrueZIP Key Management
    ---
    Christian Schlichtherle
    ---

TrueZIP Key Management

* Abstract

    This article shows how to set passwords for RAES encrypted ZIP files
    programmatically.
    Use whatever approach fits your needs best when you want to set the
    password programmatically instead of prompting the user for a key by means
    of the default Swing or Console based user interfaces.

* Introduction

    At runtime, all RAES encrypted ZIP files are managed by an instance of a
    sub-class of the abstract archive driver implementation class
    {{{../../apidocs/de/schlichtherle/truezip/fs/archive/zip/raes/ZipRaesDriver.html}<<<ZipRaesDriver>>>}}
    - typically an instance of the class
    {{{../../apidocs/de/schlichtherle/truezip/fs/archive/zip/raes/SafeZipRaesDriver.html}<<<SafeZipRaesDriver>>>}}

    Whenever the archive driver reads or writes an RAES encrypted ZIP file,
    it uses an instance of an implementation of the generic interface
    {{{../../apidocs/de/schlichtherle/truezip/key/KeyManagerProvider.html}<<<KeyManagerProvider>>>}}
    in order to obtain an instance of an implementation of the generic interface
    {{{../../apidocs/de/schlichtherle/truezip/key/KeyManager.html}<<<KeyManager>>>}}
    for the interface
    {{{../../apidocs/de/schlichtherle/truezip/crypto/raes/param/AesCipherParameters.html}<<<AesCipherParameters>>>}}
    and finally obtain an instance of an implementation of the generic interface
    {{{../../apidocs/de/schlichtherle/truezip/key/KeyProvider.html}<<<KeyProvider>>>}}
    for the prospective archive file.

    Because dependency injection is used all over the place in order to resolve
    the implementation classes of the generic interfaces
    <<<KeyManagerProvider>>>, <<<KeyManager>>> and <<<KeyProvider>>>, this
    architecture provides several ways to set passwords programmatically.

* Setting The Password For An Individual ZIP.RAES File In Advance

    Use the following approach to programmatically set the password for an
    individual ZIP.RAES file in advance:

%{snippet|id=setPassword|file=truezip-driver/truezip-driver-tzp/src/test/java/de/schlichtherle/truezip/fs/archive/zip/raes/sample/KeyManagement.java}

    Note that the parameter check at the beginning is a bit naive:
    The test only ensures that the file in question appears to be a prospective
    archive file according to the result of scanning its path name in its
    constructor.
    However, it does not check if the file in question is a prospective
    ZIP.RAES file or any other detectable archive type, e.g. ZIP, TAR etc.
    In addition, it does <not> check whether the file in question is truly a
    archive file or just a false positive archive file, that is a regular file
    which accidentally or intentionally uses a detectable archive file suffix.
    To discriminate the latter case, an application would normally have to call
    {{{../../apidocs/de/schlichtherle/truezip/file/TFile.html#isDirectory()}<<<TFile.isDirectory()>>>}}.
    However, it <must not> do so yet in this case because this would require
    to prompt the user for the password before it could have been set
    programmatically!

    This implies that there is a chance that the application sets a password
    for a false positive archive file.
    If this is an issue, then the application could call
    {{{../../apidocs/de/schlichtherle/truezip/key/KeyProvider.html#setKey(java.lang.Object)}<<<KeyProvider.setKey(null)>>>}}
    after a negative
    {{{../../apidocs/de/schlichtherle/truezip/file/TFile.html#isDirectory()}<<<TFile.isDirectory()>>>}}.
    check.

* Setting Passwords For All ZIP.RAES Files By Implementing A View

    If you need to set passwords for <all> RAES encrypted ZIP files,
    then the following is the simplest approach:

%{snippet|id=setAllPasswords|file=truezip-driver/truezip-driver-tzp/src/test/java/de/schlichtherle/truezip/fs/archive/zip/raes/sample/KeyManagement.java}

    This example instantiates the class
    {{{../../apidocs/de/schlichtherle/truezip/fs/archive/zip/raes/PromptingKeyManagerService.html}<<<PromptingKeyManagerService>>>}}
    which applies the Model-View-Controller pattern to manage its key providers.
    Here I simply substitute the default view class with a custom
    implementation.

    Note that the <<<controller>>> parameter provides the method
    {{{../../apidocs/de/schlichtherle/truezip/key/PromptingKeyProvider.Controller.html#getResource()}<<<Controller.getResource()>>>}}
    which identifies the prospective archive file so that an application
    could programmatically set passwords for individual resource URIs, too.
