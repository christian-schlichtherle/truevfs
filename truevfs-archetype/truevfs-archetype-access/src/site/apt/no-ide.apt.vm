#parse("common.apt.vm")
    ------------------------------
    Getting Started without an IDE
    ------------------------------
    Christian Schlichtherle
    ------------------------------

Getting Started without an IDE

    This guide shows how to kick-start a TrueVFS application in a command line
    shell with the help of a Maven archetype.

* Prerequisites

    You need to have the following software installed:

    * {{{http://maven.apache.org}Apache&#160;Maven&#160;3.0.4}} or later.

    * JSE&#160;7 or later.

    []

* Generating a Sample Project

    To generate a sample project, type the following command in a shell,
    thereby customizing the value of the properties <<<groupId>>>,
    <<<artifactId>>> and <<<package>>> to meet your requirements:

+--
$ mvn archetype:generate -B \
    -DarchetypeGroupId=${project.groupId} \
    -DarchetypeArtifactId=${project.artifactId} \
    -DarchetypeVersion=${project.version} \
    -DgroupId=com.company \
    -DartifactId=project \
    -Dversion=0.1-SNAPSHOT \
    -Dpackage=com.company.project
+--

    Upon successful execution, a new directory with the value of the property
    <<<artifactId>>> as its name will have been created in the current
    directory.
    If you copy/paste the above command literally to a shell this would result
    in the following directory structure:

+--
project
|-- pom.xml
`-- src
    `-- main
        `-- java
            `-- com
                `-- company
                    `-- project
                        |-- Application.java
                        |-- Cat.java
                        |-- Copy.java
                        |-- Pickr.java
                        `-- Tree.java
+--

#explore()

* Build And Run Your Application

    To build and install your application in your local Maven repository,
    enter:

+--
$ cd project
$ mvn clean install
+--

    Close to the end of the output of the Maven command, it should read
    <<<[INFO] BUILD SUCCESS>>>:

    To run the main class <<<Tree>>>, enter:

+--
$ mvn exec:java -Dexec.mainClass=com.company.project.Tree
+--

    This should produce a similar output to the following in the Console view:

+--
.
|-- pom.xml
|-- src
|   `-- main
|       `-- java
|           `-- com
|               `-- company
|                   `-- project
|                       |-- Application.java
|                       |-- Cat.java
|                       |-- Copy.java
|                       |-- Pickr.java
|                       `-- Tree.java
`-- target
    |-- classes
    |   `-- com
    |       `-- company
    |           `-- project
    |               |-- Application.class
    |               |-- Cat.class
    |               |-- Copy.class
    |               |-- Pickr.class
    |               `-- Tree.class
    |-- generated-sources
    |   `-- annotations
    |-- maven-archiver
    |   `-- pom.properties
    |-- project-0.1-SNAPSHOT.jar
    |   |-- META-INF
    |   |   |-- MANIFEST.MF
    |   |   `-- maven
    |   |       `-- com.company
    |   |           `-- project
    |   |               |-- pom.xml
    |   |               `-- pom.properties
    |   `-- com
    |       `-- company
    |           `-- project
    |               |-- Application.class
    |               |-- Cat.class
    |               |-- Copy.class
    |               |-- Pickr.class
    |               `-- Tree.class
    `-- surefire
+--

    Note that the contents of the JAR file
    <<<target/project-0.1-SNAPSHOT.jar>>> get listed, too!
    This is because the configuration file <<<pom.xml>>> is set up to recognize
    JAR files as virtual directories by adding the module TrueVFS Driver ZIP
    with the artifactId <<<truevfs-driver-zip>>> to the run time class path.
    You can change this by editing the configuration file <<<pom.xml>>>.
