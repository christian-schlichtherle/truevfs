    -----------------------
    About TrueVFS Extension JUL
    -----------------------
    Christian Schlichtherle
    -----------------------

About TrueVFS Extension JUL

    This module instruments the TrueVFS Kernel for monitoring via
    <<<java.util.logging>>> (JUL).

* Warning

    This module is <not> intended for durable use in production environments
    because of its performance impact due to excessive stack trace logging.
    Use for temporary testing and debugging only!

* Usage

    Add the JAR artifact of this module to the run time class path to
    make its services available for service location in the client API
    modules.

    When using Maven, add the following to your <<<pom.xml>>> file:

+--+
<project    xmlns="http://maven.apache.org/POM/4.0.0"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    ...
    <dependencies>
        ...
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>${project.artifactId}</artifactId>
            <version>${project.version}</version>
            <scope>runtime</scope>
        </dependency>
    </dependencies>
</project>
+--+

* Sample

    To demonstrate this module, let's use the <<<Tree>>> class generated by the
    TrueVFS Archetype File*.
    This class simply prints an ASCII directory tree of a directory and then
    terminates.
    When run unchanged with no arguments in the project directory of the
    generated archetype, it's output may look like this:

+--+
.
|-- nbactions.xml
|-- pom.xml
|-- src
|   `-- main
|       `-- java
|           `-- de
|               `-- schlichtherle
|                   `-- mavenproject1
|                       |-- Application.java
|                       |-- Cat.java
|                       |-- Copy.java
|                       |-- Pickr.java
|                       `-- Tree.java
|-- target
|   |-- classes
|   |   `-- de
|   |       `-- schlichtherle
|   |           `-- mavenproject1
|   |               |-- Application.class
|   |               |-- Cat.class
|   |               |-- Copy.class
|   |               |-- Pickr$1.class
|   |               |-- Pickr.class
|   |               `-- Tree.class
|   |-- generated-sources
|   |   `-- annotations
|   |-- maven-archiver
|   |   `-- pom.properties
|   `-- mavenproject1-1.0-SNAPSHOT.jar
|       |-- de
|       |   `-- schlichtherle
|       |       `-- mavenproject1
|       |           |-- Application.class
|       |           |-- Cat.class
|       |           |-- Copy.class
|       |           |-- Pickr$1.class
|       |           |-- Pickr.class
|       |           `-- Tree.class
|       `-- META-INF
|           |-- MANIFEST.MF
|           `-- maven
|               `-- de.schlichtherle
|                   `-- mavenproject1
|                       |-- pom.properties
|                       `-- pom.xml
`-- test.jar
    |-- archive.tar
    |   `-- pom.xml
    |-- archive.tar.gz
    |   `-- pom.xml
    |-- archive.zip
    |   `-- pom.xml
    |-- pom.xml
    `-- the-password-is-test1234.tzp
        `-- pom.xml
+--+

    As you see, the <<<Tree>>> class recursively prints the (virtual) directory
    structure of the archive files <<<mavenproject1-1.0-SNAPSHOT.jar>>> and
    <<<test.jar>>> with its enclosed archive files.

** The Log Records

    To prepare for logging, add a file <<<logging.properties>>> with the
    following content:

+--+
############################################################
#  	       Logging Configuration File
#
# You can use this file by specifying a filename
# with the java.util.logging.config.file system property.  
# For example java -Djava.util.logging.config.file=myfile
############################################################

############################################################
#  	Global properties
############################################################

# "handlers" specifies a comma separated list of log Handler 
# classes.  These handlers will be installed during VM startup.
# Note that these classes must be on the system classpath.
# By default we only configure a ConsoleHandler, which will only
# show messages at the INFO and above levels.
#handlers= java.util.logging.ConsoleHandler

# To also add the FileHandler, use the following line instead.
handlers= java.util.logging.FileHandler, java.util.logging.ConsoleHandler

# Default global logging level.
# This specifies which kinds of events are logged across
# all loggers.  For any given facility this global level
# can be overriden by a facility specific level.
# Note that the ConsoleHandler also has a separate level
# setting to limit messages printed to the console.
.level = INFO

############################################################
# Handler specific properties.
# Describes specific configuration info for Handlers.
############################################################

# default file output is in user's home directory.
#java.util.logging.FileHandler.pattern = %h/java%u.log
java.util.logging.FileHandler.pattern = target/truevfs%u-%g.log
java.util.logging.FileHandler.limit = 100000
java.util.logging.FileHandler.count = 10
java.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter

# Limit the message that are printed on the console to INFO and above.
java.util.logging.ConsoleHandler.level = INFO
java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter

# Example to customize the SimpleFormatter output format 
# to print one-line log message like this:
#     <level>: <log message> [<date/time>]
#
# java.util.logging.SimpleFormatter.format=%4$s: %5$s [%1$tc]%n

############################################################
# Facility specific properties.
# Provides extra control for each logger.
############################################################

# At the CONFIG level, you will see the configuration of services
# found on the class path. Use this to debug your class path configuration.
# The finer the level, the more information you will get.
# It's recommended to avoid the FINEST level because of its excessive output.
net.truevfs.level = FINER
+--+

    You can activate this configuration by storing this file in the current
    directory and executing the JVM with the argument
    <<<-Djava.util.logging.config.file=logging.properties>>>.

    The instrumented file system drivers then record a stack trace each time
    the TrueZIP Kernel accesses a (virtual) file system or a temporary buffer.
    This is nice for post-mortem analysis of issues like
    left-over-temporary-files or out-of-file-descriptors.
    Here are the log records for the <<<Tree>>> class with TrueVFS 7.4:
    {{./truezip0-0.log}}.

    Note the stack traces in the log file.
    As you can see from the first stack trace, the record comes from a call to
    <<<TFile.exists()>>> by the <<<Tree>>> class.

    Note the use of different logging levels to support the filtering of
    interesting log records:

    * Level.FINE is used for allocating and releasing temporary buffers.

    * Level.FINER is used for opening and closing temporary buffers.

    * Level.FINEST is used for opening and closing any other file system entries.

    []
