###
# Copyright (C) 2005-2010 Schlichtherle IT Services

###
# This is the default configuration file for TrueZIP.
# It can be extended or overridden by other configuration files found on the
# class path.
# It's task is to map archive file suffixes to archive drivers and to specify
# which archive file suffixes shall be recognized in paths by default.
#
# When the package private class
# de.schlichtherle.truezip.io.GlobalArchiveDriverRegistry is loaded, it uses the
# current thread's context class loader to enumerate all instances of the
# relative path
# "META-INF/services/de.schlichtherle.truezip.io.registry.properties"
# on the class path. These configuration files are processed in arbitrary
# order to configure the global registry of archive file suffixes and archive
# drivers.
# This allows archive drivers to be "plugged in" by simply providing their
# own configuration file somewhere on the class path.
# Likewise, client applications may provide their own configuration file
# somewhere on the class path in order to extend or override the settings
# configured by TrueZIP and any optional plug-in drivers.
#
# Note that all keys and values in configuration files are case sensitive:
# Keywords must be uppercase and archive drivers must match the case of the
# fully qualified class name of their implementation.
# Archive file suffixes are actually case insensitive, but should be lowercase
# in order to clearly distinguish them from keywords.
#
# Suffixes may be specified as a list of the form "suffix[|suffix]*", where
# zero length or duplicated suffixes and leading dots are silently ignored.
# E.g. "zip", "zip|jar", "tar" or "tgz|tar.gz" are valid suffix lists.

###
# This entry is used to resolve conflicts between the configuration files
# provided by client applications on one hand side and TrueZIP's defaults and
# any optional plug-in drivers on the other hand side.
#
# It separates configuration files into two priority classes:
# +----------+-------------+----------------------------+---------------+
# | PRIORITY | NAME        | USED BY                    | IDENTIFIED BY |
# | (1)      | Application | Client applications        | (default)     |
# | (2)      | Driver      | TrueZIP or plug-in drivers | DRIVER=TRUE   |
# +----------+-------------+----------------------------+---------------+
# If and only if this entry is present with a value of "TRUE", the
# configuration file belongs to the driver class and all its entries may be
# overridden by configuration files of the application class.
# Unless otherwise specified for a particular entry type, there's no guarantee
# on the resolution of conflicts between configuration files of the same
# priority class.
DRIVER=TRUE

###
# This optional entry specifies the set of suffixes recognized by
# ArchiveDetector.DEFAULT.
#
# Each suffix listed here is *added* to the joint set of suffixes specified by
# all other configuration files in the same priority class.
# Finally, the joint set of the higher priority class takes precedence.
#
# For each suffix in the list, a driver class mapping must be present, too.
# Suffixes for which no driver mapping is present are logged at warning level
# using java.util.logging and ignored.
#
# Two special keywords are recognized in the list:
# + NULL forces the joint set to be cleared.
# + ALL adds all suffixes for all archive drivers registered by all
#   configuration files in all priority classes to the joint set.
#
# These keywords take precedence over any other suffixes in the joint set of
# the same priority class.
# However, if both keywords appear in a joint set, the result is undefined:
# The joint set may be empty or contain all suffixes.

# These are the default suffixes which were configured in
# TrueZIP 3.1 to 5.X. Use this for backwards compatibility only.
#DEFAULT=tzp|zip|zip.rae

# These are the default suffixes since TrueZIP 6.0
# This list has been selected so that TrueZIP is self contained and exotic,
# potentially slow drivers for archive types like SFX/EXE are excluded.
DEFAULT=ear|jar|war|zip

###
# Following are the mappings of archive file suffixes to archive drivers.
#
# Each entry maps a list of suffixes (the key) to the fully qualified class
# name of an archive driver implementation (the value).
# Each suffix is added to the list of suffixes recognized by the
# ArchiveDetector.ALL instance.
# Each archive driver class must implement the interface
# de.schlichtherle.truezip.io.archive.driver.ArchiveDriver interface and provide a
# public, no-arguments constructor.

###
# The ZIP driver family.
#
# Thanks to the central directory in ZIP files, this is the fastest and most
# efficient driver family.

# This is for regular ZIP files.
# In accordance with PKZIP's original set of tools, this driver uses IBM437
# as its character set for entry names and comments.
zip=de.schlichtherle.truezip.io.archive.impl.zip.ZipDriver

# Use this instead if you would like TrueZIP to check the CRC-32 value for
# each entry in existing archives.
# Read the Javadoc first to understand the implications.
#zip=de.schlichtherle.truezip.io.archive.driver.zip.CheckedZipDriver

# This is for JAR derivatives.
# JARs use UTF-8 as their character set.
# Otherwise, there is no difference between this driver and the ZipDriver.
ear|jar|war=de.schlichtherle.truezip.io.archive.impl.zip.JarDriver

# Use this instead if you would like TrueZIP to check the CRC-32 value for
# each entry in existing archives.
# Read the Javadoc first to understand the implications.
#ear|jar|war=de.schlichtherle.truezip.io.archive.impl.zip.CheckedJarDriver

###
# The OpenDocument Format (ODF) driver family.
#
# This driver family supports building archive files according to
# the specification of the OpenDocument Format ("ODF"), version 1.1.
# This driver ensures that the entry named "mimetype", if present at
# all, is always written as the first entry and uses the STORED method
# rather than the DEFLATED method in the resulting archive file in order
# to meet the requirements of section 17.4 of the OpenDocument Specification,
# version 1.1
# (http://www.oasis-open.org/committees/download.php/20847/OpenDocument-v1.1-cs1.pdf)
#
# Other than this, ODF files are treated like regular JAR files.
# In particular, this class does *not* check an ODF file for the
# existance of the "META-INF/manifest.xml" entry or any other entry.
# 
# For more information, please refer to the Javadoc of the respective driver
# class.
#

# Documents: Graphic|Presentation|Sheet|Text.
odg|odp|ods|odt=de.schlichtherle.truezip.io.archive.impl.zip.OdfDriver
# Templates for dito.
otg|otp|ots|ott=de.schlichtherle.truezip.io.archive.impl.zip.OdfDriver
# Miscellaneous: Database|Formula|Management|HTML Template.
odb|odf|odm|oth=de.schlichtherle.truezip.io.archive.impl.zip.OdfDriver

###
# This is for Self Extracting Archives (SFX).
#
# SFX files are regular ZIP files which have a preamble and postamble for
# the self extracting binary code.
# TrueZIP does not actually use this code in any other way than retaining it
# when updating an existing SFX file.
# So you can't get infected with viruses, but you can introspect and probably
# update SFX files on all platforms.
#
# Note: Accessing false positive SFX archives can be very slow if the file is
# big, so use with care.
# SFXs use the system's native character set, e.g. CP1252 for a Windows system
# in Western Europe.

# This driver doesn't support creating or modifying SFX files!
# This is because TrueZIP does not know how to create the binary code for
# new SFX files and most binary code in existing SFX files is not resilient
# against updating the ZIP file contents for licensing and/or technical reasons.
exe=de.schlichtherle.truezip.io.archive.impl.zip.ReadOnlySfxDriver

# Use this instead if you would like TrueZIP to check the CRC-32 value for
# each entry in existing archives-
# Read the Javadoc first to understand the implications.
#exe=de.schlichtherle.truezip.io.archive.impl.zip.CheckedReadOnlySfxDriver

# Use this instead to support creating and modifying SFX files.
# For new SFX files, no binary code preamble or postamble is written, so the
# resulting archive file is a regular ZIP file with the native character set.
# For existing SFX files, this driver will most likely break the integrity
# checks of the binary code, so use with caution!
#exe=de.schlichtherle.truezip.io.archive.impl.zip.ReadWriteSfxDriver

###
# The RAES encrypted ZIP driver family.
#
# RAES encrypted ZIP files are regular ZIP files with UTF-8 as their
# character set which are stored in the Random Access Encryption Specification
# (RAES) format.
# RAES is an extensible specification which features transparent random access
# to encrypted data using CTR mode. It provides encryption and authentication.
# The current version of the specification supports AES for the encryption
# and SHA-256 for the authentication.
# Encryption and authentication is password based according to PKCS #5 V2.0.
# For more information, please refer to the Javadoc for the package
# de.schlichtherle.truezip.io.crypto.raes.
#
# Note that unlike WinZip's contended AES encryption, RAES encrypts the entire
# archive in order to provide a much stronger security level.
#
# Dependencies: This driver family requires lcrypto.jar from Bouncy Castle's
# Lightweight Crypto API for JDK 1.4 version 1.30 or higher in the runtime
# class path!

# A safe archive driver which builds RAES encrypted ZIP archives.
# Note that the suffixes .zip.rae and .zip.raes are obsolete and should not
# be used in new applications.
tzp|zip.rae|zip.raes=de.schlichtherle.truezip.io.archive.impl.zip.raes.SafeZipRaesDriver

# A paranoid archive driver which builds RAES encrypted ZIP archives.
# Read the Javadoc first to understand the implications.
#tzp|zip.rae|zip.raes=de.schlichtherle.truezip.io.archive.impl.zip.raes.ParanoidZipRaesDriver

###
# The TAR driver family.
#
# In contrast to the ZIP file format, the TAR file format does not contain
# an index. So the TAR driver family has to untar an archive file entirely
# on the very first read or write access.
# In other words, this means that all entries are untared into the temp
# file folder even if you just do new File("truezip-src.tar").list() .
# So you should use this driver with care.
#
# TAR files should actually be able to use the system's native character set.
# However, the low level TAR code as of Ant 1.6.5 doesn't support
# this, so these drivers all support US-ASCII only.
#
# Dependencies: This driver family requires ant.jar from Apache's Ant,
# version 1.8.1 or later in the runtime class path!

tar=de.schlichtherle.truezip.io.archive.impl.tar.TarDriver

tgz|tar.gz=de.schlichtherle.truezip.io.archive.impl.tar.TarGZipDriver

tbz2|tar.bz2=de.schlichtherle.truezip.io.archive.impl.tar.TarBZip2Driver
