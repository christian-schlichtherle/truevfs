    ---
    Key Management
    ---
    Christian Schlichtherle
    ---

Key Management

* Abstract

    This article shows how to set passwords for WinZip AES encrypted ZIP
    entries programmatically.
    Use whatever approach fits your needs best when you want to set the
    password programmatically instead of prompting the user for a key by means
    of the default Swing or Console based user interfaces.

* Introduction

    At runtime, all WinZip AES encrypted ZIP entries are managed by an instance
    of a sub-class of the abstract archive driver implementation class
    {{{../../apidocs/net/truevfs/driver/zip/ZipDriver.html}<<<ZipDriver>>>}}.
    For custom encrypted application file formats, this should be an instance
    of the class
    {{{../../apidocs/net/truevfs/driver/zip/JarDriver.html}<<<JarDriver>>>}}

    Whenever this archive driver class reads or writes a WinZip AES encrypted
    ZIP entry, it uses an instance of the interface
    {{{../../apidocs/net/truevfs/key/KeyManagerProvider.html}<<<KeyManagerProvider>>>}}
    in order to obtain an instance of the interface
    {{{../../apidocs/net/truevfs/key/KeyManager.html}<<<KeyManager>>>}}
    for the interface
    {{{../../apidocs/net/truevfs/key/param/AesPbeParameters.html}<<<AesPbeParameters>>>}}
    and finally obtain an instance of the interface
    {{{../../apidocs/net/truevfs/key/KeyProvider.html}<<<KeyProvider>>>}}
    for the prospective archive file.

    Because dependency injection is used all over the place in order to resolve
    the implementation classes of the interfaces
    <<<KeyManagerProvider>>>, <<<KeyManager>>> and <<<KeyProvider>>>, this
    architecture provides several ways to set passwords programmatically.
    In order to set a common password for all WinZip AES encrypted ZIP entries
    you need a custom
    {{{../../apidocs/net/truevfs/file/TArchiveDetector.html}<<<TArchiveDetector>>>}}
    which you can either inject into any
    {{{../../apidocs/net/truevfs/file/TFile.html}<<<TFile>>>}}
    constructor or install as the default archive detector by calling

%{snippet|id=install|file=${project.build.testSourceDirectory}/net/truevfs/driver/zip/sample/KeyManagement.java}

* Setting Passwords For All WinZip AES Entries By Implementing A Custom Driver

    This option bypasses the key manager by subclassing
    {{{../../apidocs/net/truevfs/driver/zip/JarDriver.html}<<<JarDriver>>>}}
    and overriding the relevant methods for dealing with WinZip AES parameters.

%{snippet|id=newArchiveDetector1|file=${project.build.testSourceDirectory}/net/truevfs/driver/zip/sample/KeyManagement.java}

* Setting Passwords For All WinZip AES Entries By Implementing A Custom View

    Another option is to use a prompting key manager by instantiating the class
    {{{../../apidocs/net/truevfs/key/PromptingKeyManagerProvider.html}<<<PromptingKeyManagerProvider>>>}}
    which applies the Model-View-Controller pattern to manage its key providers.
    Here I simply substitute the default view class with a custom
    implementation.

%{snippet|id=newArchiveDetector2|file=${project.build.testSourceDirectory}/net/truevfs/driver/zip/sample/KeyManagement.java}
